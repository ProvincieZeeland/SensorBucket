%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.5.1 (Build 21G83) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 654 104
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 654 104
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.18431373 0.27058825 0.36078432 sc
q
-90 195 m
752 195 l
752 -400 l
-90 -400 l
h
W*
0 0 654 104 rc
135.29979 62.069748 m
135.29979 51.932148 138.60219 47.861748 152.11899 45.404148 c
157.57179 44.405746 l
160.33659 43.868145 161.02779 43.560947 161.02779 41.333748 c
161.02779 39.106548 160.18298 38.415348 157.03419 38.415348 c
152.73338 38.415348 145.74458 38.338547 137.75739 38.568947 c
135.29979 24.821747 l
146.20538 24.591347 150.19899 24.668146 156.65019 24.668146 c
173.85339 24.668146 179.61339 29.429747 179.61339 41.717747 c
179.61339 42.716148 l
179.61339 51.932148 176.31099 56.847347 164.25339 59.074547 c
156.49658 60.533745 l
153.7318 61.071346 153.19418 61.224945 153.19418 63.298546 c
153.19418 65.141747 153.96219 65.909744 157.03419 65.909744 c
161.02779 65.909744 166.94139 65.832947 175.77339 65.756149 c
178.30779 79.503349 l
168.70779 79.733749 162.17979 79.656944 156.72699 79.656944 c
141.1366 79.656944 135.29979 73.820145 135.29979 63.068146 c
135.29979 62.069748 l
h
f
205.57179 36.034546 m
201.04059 36.034546 199.65819 37.340145 199.65819 40.796146 c
214.7878 40.796146 l
221.46939 40.796146 222.92859 43.484146 222.92859 49.474548 c
222.92859 50.856945 l
222.92859 62.530548 216.01659 66.754547 203.72859 66.754547 c
189.98138 66.754547 183.45338 61.455345 183.45338 47.247345 c
183.45338 43.100147 l
183.45338 29.506546 188.98299 24.668146 203.49818 24.668146 c
209.33499 24.668146 215.2486 24.744947 218.93498 24.821747 c
221.00859 36.111347 l
216.47739 36.034546 211.02458 36.034546 205.57179 36.034546 c
h
203.95898 55.388145 m
206.95419 55.388145 208.2598 54.466545 208.2598 50.242546 c
199.65819 50.242546 l
199.65819 54.466545 200.96379 55.388145 203.95898 55.388145 c
h
f
248.19579 53.237747 m
250.88379 53.237747 251.80539 52.316147 251.80539 49.013748 c
251.80539 24.821747 l
268.70139 24.821747 l
268.70139 49.013748 l
268.70139 62.760948 263.32538 66.754547 248.19579 66.754547 c
233.06619 66.754547 227.69019 62.760948 227.69019 49.013748 c
227.69019 24.821747 l
244.58618 24.821747 l
244.58618 49.013748 l
244.58618 52.316147 245.50778 53.237747 248.19579 53.237747 c
h
f
272.8486 24.898546 m
279.53018 24.668146 289.591 24.668146 291.66458 24.668146 c
305.25818 24.668146 311.01819 28.200947 311.01819 38.108147 c
311.01819 38.799347 l
311.01819 47.170547 306.79419 50.242546 297.19418 51.087345 c
292.1254 51.471348 l
290.05179 51.701748 289.51419 51.778545 289.51419 52.930546 c
289.51419 54.082546 289.97498 54.466545 292.04858 54.466545 c
293.815 54.466545 298.039 54.543346 308.3302 54.312946 c
310.40378 65.525749 l
298.9606 65.756149 295.35098 65.679344 292.66299 65.679344 c
278.1478 65.679344 273.3862 61.071346 273.3862 52.853748 c
273.3862 52.085747 l
273.3862 44.405746 277.0726 40.335346 286.67258 39.644146 c
292.27899 39.260147 l
294.19897 39.029747 294.8902 38.952946 294.8902 37.493748 c
294.8902 36.188145 294.27579 35.880947 292.04858 35.880947 c
286.9798 35.880947 279.37659 36.034546 274.8454 36.034546 c
272.8486 24.898546 l
h
f
336.20859 23.592947 m
351.79898 23.592947 357.4054 28.584946 357.4054 43.100147 c
357.4054 47.247345 l
357.4054 61.762547 351.79898 66.754547 336.20859 66.754547 c
320.61819 66.754547 315.01178 61.762547 315.01178 47.247345 c
315.01178 43.100147 l
315.01178 28.584946 320.61819 23.592947 336.20859 23.592947 c
h
336.20859 36.572147 m
333.21338 36.572147 332.0614 37.570545 332.0614 42.332146 c
332.0614 48.015347 l
332.0614 52.700146 333.21338 53.775345 336.20859 53.775345 c
339.2038 53.775345 340.3558 52.700146 340.3558 48.015347 c
340.3558 42.332146 l
340.3558 37.570545 339.2038 36.572147 336.20859 36.572147 c
h
f
379.60059 47.093746 m
379.60059 51.317745 380.599 52.239346 384.51578 52.239346 c
386.1286 52.239346 387.9718 52.162548 389.73819 52.085747 c
392.1958 65.602547 l
386.2822 65.832947 383.59418 65.756149 382.67258 65.756149 c
368.38779 65.756149 362.70459 61.992947 362.70459 47.861748 c
362.70459 24.821747 l
379.60059 24.821747 l
379.60059 47.093746 l
h
f
439.50458 65.909744 m
439.50458 74.81855 434.35898 79.503349 422.60858 79.503349 c
394.34619 79.503349 l
394.34619 24.821747 l
420.99579 24.821747 l
434.74298 24.821747 441.1174 29.352947 441.1174 40.181747 c
441.1174 41.640945 l
441.1174 48.015347 438.5062 51.778545 433.591 53.928947 c
437.27737 56.002548 439.50458 59.535347 439.50458 64.757744 c
439.50458 65.909744 l
h
418.99899 47.016945 m
422.9158 47.016945 424.45178 46.172146 424.45178 42.869747 c
424.45178 41.871346 l
424.45178 38.568947 422.9158 37.724148 418.99899 37.724148 c
410.47418 37.724148 l
410.47418 47.016945 l
418.99899 47.016945 l
h
418.38458 66.600945 m
421.68698 66.600945 422.83899 65.525749 422.83899 62.991348 c
422.83899 62.300148 l
422.83899 59.765747 421.68698 58.844147 418.38458 58.844147 c
410.47418 58.844147 l
410.47418 66.600945 l
418.38458 66.600945 l
h
f
466.00058 37.109745 m
463.31259 37.109745 462.39099 38.031345 462.39099 41.333748 c
462.39099 65.525749 l
445.495 65.525749 l
445.495 41.333748 l
445.495 27.586546 450.871 23.592947 466.00058 23.592947 c
481.13019 23.592947 486.5062 27.586546 486.5062 41.333748 c
486.5062 65.525749 l
469.6102 65.525749 l
469.6102 41.333748 l
469.6102 38.031345 468.6886 37.109745 466.00058 37.109745 c
h
f
514.07739 37.647346 m
509.85339 37.647346 508.85498 38.876148 508.85498 43.100147 c
508.85498 47.247345 l
508.85498 51.471348 509.93018 52.700146 514.07739 52.700146 c
515.07581 52.700146 515.92059 52.776947 523.90778 52.546547 c
526.21179 65.525749 l
517.9942 65.756149 515.45978 65.679344 513.0022 65.679344 c
497.64218 65.679344 491.80539 60.226547 491.80539 47.247345 c
491.80539 43.100147 l
491.80539 29.967346 496.87418 24.668146 513.30939 24.668146 c
515.15259 24.668146 518.22461 24.591347 524.0614 24.821747 c
526.36542 37.800945 l
520.22137 37.570545 517.14941 37.647346 514.07739 37.647346 c
h
f
547.0246 81.884148 m
530.89661 81.884148 l
530.89661 24.821747 l
547.0246 24.821747 l
547.0246 40.642548 l
557.46936 24.821747 l
576.59259 24.821747 l
560.54138 47.016945 l
575.5174 65.525749 l
556.7782 65.525749 l
547.0246 52.085747 l
547.0246 81.884148 l
h
f
600.78461 36.034546 m
596.25342 36.034546 594.87097 37.340145 594.87097 40.796146 c
610.00061 40.796146 l
616.68219 40.796146 618.14142 43.484146 618.14142 49.474548 c
618.14142 50.856945 l
618.14142 62.530548 611.22937 66.754547 598.94141 66.754547 c
585.19421 66.754547 578.6662 61.455345 578.6662 47.247345 c
578.6662 43.100147 l
578.6662 29.506546 584.1958 24.668146 598.711 24.668146 c
604.54779 24.668146 610.46136 24.744947 614.14777 24.821747 c
616.22137 36.111347 l
611.69019 36.034546 606.23737 36.034546 600.78461 36.034546 c
h
599.17181 55.388145 m
602.16699 55.388145 603.4726 54.466545 603.4726 50.242546 c
594.87097 50.242546 l
594.87097 54.466545 596.17657 55.388145 599.17181 55.388145 c
h
f
650.85822 53.391346 m
653.00861 65.525749 l
639.79901 65.525749 l
639.79901 76.815346 l
622.90302 74.664948 l
622.90302 42.255348 l
622.90302 28.124147 626.28217 24.668146 641.56537 24.668146 c
645.17499 24.668146 647.479 24.744947 649.62939 24.821747 c
651.93341 37.493748 l
649.78296 37.416946 648.32379 37.340145 645.02136 37.340145 c
640.6438 37.340145 639.79901 38.415348 639.79901 42.255348 c
639.79901 53.391346 l
650.85822 53.391346 l
h
f
Q
q
0 0 654 104 rc
76 0 0 69 18 17 cm
BI
/Width 228
/Height 207
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#J,
~> %APLeod
EI
Q
q
-90 195 m
752 195 l
752 -400 l
-90 -400 l
h
W*
18 85 m
93 85 l
83.292603 23.830444 l
82.668266 19.89628 79.276108 17 75.292709 17 c
35.707287 17 l
31.723892 17 28.331738 19.89628 27.707399 23.830444 c
18 85 l
18 85 l
h
W*
0 0 654 104 rc
1 0 0 -1 18 85 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [7.6849637 41.425606 24.667313 -12.007638] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
+j[Lp+j[Lp+j[Oq+j[Oq+j[Oq+j[Oq+j[Rr+j[Rr+j[Rr+j[Us+j[Us+j[Us+j[Xt+j[Xt+j[Xt+j[Xt
+j[[u+j[[u+j[[u+j[_!+j[_!+j[_!+j[_!+j[b"+j[b"+j[b"+j[e#+j[e#+j[e#+j[h$+j[h$+j[h$
+O@_#+O@b$+O@b$+O@b$+O@e%+O@e%+O@e%+O@e%+O@h&+O@h&+O@h&+O@k'+O@k'+O@k'+O@n(+O@n(
+O@n(+O@n(+O@q)+O@q)+O@q)+O@t*+O@t*+O@t*+O@t*+OA"++OA"++OA"++OA%,+OA%,+OA%,+OA(-
+O8",+O8",+O8",+O8%-+O8%-+O8%-+O8(.+O8(.+O8(.+O8(.+O8+/+O8+/+O8+/+O8.0+O8.0+O8.0
+O811+O811+O811+O811+O842+O842+O842+O873+O873+O873+O873+O8:4+O8:4+O8:4+O8=5+O8=5
+3r44+3r75+3r75+3r75+3r75+3r:6+3r:6+3r:6+3r=7+3r=7+3r=7+3r=7+3r@8+3r@8+3r@8+3rC9
+3rC9+3rC9+3rF:+3rF:+3rF:+3rF:+3rI;+3rI;+3rI;+3rL<+3rL<+3rL<+3rL<+3rO=+3rO=+3rO=
+3rR>+3rR>+3rR>+3rU?+3rU?+3rU?+3rU?+3rX@+3rX@+3rX@+3r[A+3r[A+3r[A+3r[A+3r^B+3r^B
+3r^B+3raC+3raC+3raC+3rdD+3rdD+3rdD+3rdD+3rgE+3rgE+3rgE+3rjF+3rjF+3rjF+3rjF+3rmG
*mWdF*mWdF*mWgG*mWgG*mWgG*mWjH*mWjH*mWjH*mWjH*mWmI*mWmI*mWmI*mWpJ*mWpJ*mWpJ*mWpJ
*mWsK*mWsK*mWsK*mX!L*mX!L*mX!L*mX$M*mX$M*mX$M*mX$M*mX'N*mX'N*mX'N*mX*O*mX*O*mX*O
*mO$N*mO'O*mO'O*mO'O*mO*P*mO*P*mO*P*mO-Q*mO-Q*mO-Q*mO-Q*mO0R*mO0R*mO0R*mO3S*mO3S
*mO3S*mO3S*mO6T*mO6T*mO6T*mO9U*mO9U*mO9U*mO<V*mO<V*mO<V*mO<V*mO?W*mO?W*mO?W*mOBX
*R49W*R49W*R49W*R4<X*R4<X*R4<X*R4?Y*R4?Y*R4?Y*R4BZ*R4BZ*R4BZ*R4BZ*R4E[*R4E[*R4E[
*R4H\*R4H\*R4H\*R4H\*R4K]*R4K]*R4K]*R4N^*R4N^*R4N^*R4Q_*R4Q_*R4Q_*R4Q_*R4T`*R4T`

~> def currentdict end
/Function exch def currentdict end sh
Q
q
-90 195 m
752 195 l
752 -400 l
-90 -400 l
h
W*
0 0 654 104 rc
48.37059 103.95 m
52.385147 103.95 56.205101 102.22046 58.853729 99.203598 c
96.189285 56.676998 l
102.04408 93.501991 l
102.05 93.57692 l
102.05 93.839073 101.83924 94.050003 101.58123 94.050003 c
77.570503 94.050003 l
74.836693 94.050003 72.620499 96.26619 72.620499 99 c
72.620499 101.73381 74.836693 103.95 77.570503 103.95 c
101.58123 103.95 l
107.30862 103.95 111.95 99.304939 111.95 93.57692 c
111.95 93.031288 111.90697 92.486496 111.8213 91.947632 c
104.67728 47.008999 l
109.71983 41.265793 l
111.52348 39.211391 111.3202 36.083824 109.26579 34.280174 c
107.3502 32.598389 104.50154 32.661499 102.66315 34.343201 c
100.29732 19.45937 l
98.520012 8.2797422 88.885033 0.050000001 77.570503 0.050000001 c
34.430298 0.050000001 l
23.115768 0.050000001 13.480785 8.2797422 11.70348 19.45937 c
0.17949824 91.947632 l
-0.71975428 97.604118 3.1340661 102.9205 8.7897511 103.82105 c
9.0443668 103.85783 l
9.3535728 103.91831 9.6730852 103.95 10 103.95 c
48.37059 103.95 l
h
10.346516 94.04422 m
10.091138 94.003555 9.9154978 93.761261 9.9567156 93.501991 c
21.480698 21.013725 l
22.493986 14.639928 27.984726 9.9499998 34.430298 9.9499998 c
77.570503 9.9499998 l
84.016075 9.9499998 89.506813 14.639928 90.520103 21.013725 c
94.169281 43.973 l
51.414082 92.672012 l
50.645126 93.547874 49.536106 94.050003 48.37059 94.050003 c
10.41957 94.050003 l
10.395107 94.050003 10.370681 94.048065 10.346516 94.04422 c
h
f
Q
0.97647059 0.97647059 0.97647059 sc
q
-90 195 m
752 195 l
752 -400 l
-90 -400 l
h
W*
18 85 m
93 85 l
83.292603 23.830444 l
82.668266 19.89628 79.276108 17 75.292709 17 c
35.707287 17 l
31.723892 17 28.331738 19.89628 27.707399 23.830444 c
18 85 l
18 85 l
h
W*
0 0 654 104 rc
4.7210126 87.046867 m
26.106174 89.270073 47.570812 82.21978 63.612709 67.704002 c
79.653534 53.187935 88.873337 32.472408 88.908463 10.867212 c
88.912857 8.1586485 86.72744 5.9760513 84.027504 5.9945564 c
81.330917 6.013525 79.14315 8.2219038 79.138733 10.927739 c
79.108223 29.749641 71.075722 47.798195 57.101715 60.443359 c
43.128288 73.08799 24.429897 79.229279 5.8023186 77.292702 c
3.1215796 77.014244 0.70726353 78.970421 0.40731028 81.661636 c
0.25065464 83.066612 0.69987655 84.438972 1.6191701 85.465103 c
2.4151115 86.353462 3.5091012 86.920815 4.7210126 87.046867 c
h
5.4623485 50.897083 m
17.50268 53.187683 29.567511 49.835583 38.55751 41.700806 c
47.206749 33.873737 51.81345 22.601717 51.196281 10.778542 c
51.053921 8.0542078 48.748081 5.9206181 46.041508 6.012475 c
43.328114 6.1045184 41.243488 8.3966246 41.385967 11.127179 c
41.848808 19.991474 38.398365 28.435884 31.91963 34.298531 c
25.186083 40.391754 16.151707 42.901176 7.1261826 41.184082 c
4.4491901 40.674942 1.9068531 42.442078 1.4516912 45.128307 c
1.1945494 46.647549 1.6567991 48.182667 2.6737921 49.317848 c
3.4034765 50.132248 4.3749356 50.690166 5.4623485 50.897083 c
h
63.008831 67.036667 m
47.156048 81.381317 25.944662 88.348427 4.814096 86.151688 c
3.8266227 86.048988 2.9376454 85.587952 2.2894928 84.864548 c
1.5397898 84.027718 1.1737524 82.909485 1.3017695 81.761353 c
1.5470818 79.560379 3.521497 77.960632 5.7092938 78.187881 c
24.591404 80.150917 43.543053 73.926453 57.705589 61.110691 c
71.867706 48.295311 80.007812 30.004974 80.038734 10.929203 c
80.042343 8.716588 81.832047 6.9100223 84.033752 6.8945346 c
86.23278 6.8794627 88.012047 8.6564312 88.008469 10.865752 c
87.973747 32.217072 78.861557 52.690823 63.008831 67.036667 c
h
37.953636 41.033466 m
29.173487 48.978359 17.394667 52.250992 5.6305685 50.012943 c
4.7393804 49.843365 3.9435425 49.386307 3.3441143 48.717285 c
2.5076363 47.7836 2.1282933 46.523811 2.3390567 45.27858 c
2.7099779 43.089516 4.776257 41.653282 6.9580002 42.06823 c
16.259697 43.837864 25.580093 41.248997 32.523506 34.965862 c
39.203854 28.920778 42.761635 20.213669 42.284744 11.080266 c
42.168411 8.8507624 43.863579 6.9868722 46.072025 6.9119573 c
48.286526 6.8368006 50.18066 8.5894423 50.297508 10.825508 c
50.900623 22.379494 46.401276 33.388832 37.953636 41.033466 c
h
6.2558088 70.227097 m
22.486881 71.979454 38.876732 66.575706 51.223965 55.403114 c
63.525177 44.271183 70.585342 28.51298 70.593109 12.167593 c
70.594368 9.5134287 68.44149 7.4274368 65.789917 7.5136752 c
63.149853 7.5997496 61.013016 9.8070402 61.011791 12.449265 c
61.005184 26.027925 55.139297 39.121689 44.917843 48.37114 c
34.659294 57.65416 21.043478 62.14283 7.5627317 60.687557 c
4.9461036 60.405334 2.5330143 62.304153 2.1654532 64.931114 c
1.969128 66.33268 2.3927195 67.705452 3.3023372 68.720779 c
4.0573421 69.563446 5.0962801 70.101982 6.2558088 70.227097 c
h
50.620087 54.735775 m
38.462147 65.737083 22.326763 71.056938 6.3523855 69.332291 c
5.4152684 69.231178 4.5802298 68.798332 3.9726598 68.120216 c
3.2391603 67.301476 2.8973684 66.193802 3.056761 65.055901 c
3.3572364 62.908398 5.3345847 61.352455 7.4661784 61.582363 c
21.203592 63.065342 35.073879 58.492783 45.521721 49.038475 c
55.930817 39.619221 61.90506 26.283587 61.911793 12.449693 c
61.912788 10.292874 63.664459 8.4834499 65.819206 8.4131985 c
67.962227 8.3435001 69.694122 10.021594 69.693108 12.167167 c
69.685463 28.257313 62.733662 43.773647 50.620087 54.735775 c
h
f
ep
end
%%Trailer
%%EOF
